import { ethers } from 'ethers';
import { AwsKmsSigner } from 'ethers-aws-kms-signer';

// import { CeloJsonRpcProvider } from "celo-ethers-provider";

const bytecode =
  '0x608060405234801561001057600080fd5b50610679806100206000396000f3fe6080604052600436106100295760003560e01c806356d5d4751461002e578063a778af8714610050575b600080fd5b34801561003a57600080fd5b5061004e61004936600461043b565b610063565b005b61004e61005e3660046104ba565b610125565b600061006d6103c6565b9050600061007c600283610563565b159050806100ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f626c6f636b2068617368206973206f6464000000000000000000000000000000604482015260640160405180910390fd5b6040518281527f1e8284519093f867c8c8de794693d723718c98d6ad442f387dfd50dd1e3d93ba9060200160405180910390a1505050505050565b6040517ffa31de0100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063fa31de0190610180908790309088908890600401610577565b6020604051808303816000875af115801561019f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c391906105d8565b905060006101cf6103c6565b9050346101dd600583610563565b6000036103315760006101f16002836105f1565b6040517f7de25e8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301526024820187905291925090891690637de25e8a9083906044016000604051808303818588803b15801561026657600080fd5b505af115801561027a573d6000803e3d6000fd5b50505050508773ffffffffffffffffffffffffffffffffffffffff16637de25e8a82846102a79190610605565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff8d166004820152602481018890526044016000604051808303818588803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b5050505050506103bc565b6040517f7de25e8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201859052881690637de25e8a9083906044016000604051808303818588803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b50505050505b5050505050505050565b60006103d3600143610605565b40905090565b803563ffffffff811681146103ed57600080fd5b919050565b60008083601f84011261040457600080fd5b50813567ffffffffffffffff81111561041c57600080fd5b60208301915083602082850101111561043457600080fd5b9250929050565b6000806000806060858703121561045157600080fd5b61045a856103d9565b935060208501359250604085013567ffffffffffffffff81111561047d57600080fd5b610489878288016103f2565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104b757600080fd5b50565b6000806000806000608086880312156104d257600080fd5b85356104dd81610495565b945060208601356104ed81610495565b93506104fb604087016103d9565b9250606086013567ffffffffffffffff81111561051757600080fd5b610523888289016103f2565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261057257610572610534565b500690565b63ffffffff8516815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b6000602082840312156105ea57600080fd5b5051919050565b60008261060057610600610534565b500490565b60008282101561063e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea26469706673582212209073c97973bbdc916a5aa701be1df922d4ff289bf18ac7e005b2ba7e96486ed464736f6c634300080d0033';

async function main() {
  const rpcUrl = process.env.RPC_URL;
  if (!rpcUrl) {
    throw Error('rpcUrl undefined');
  }

  const provider = new ethers.providers.JsonRpcProvider(rpcUrl);
  // const provider = new CeloJsonRpcProvider(rpcUrl);
  let signer = new AwsKmsSigner({
    keyId:
      'arn:aws:kms:us-east-1:625457692493:key/86461f69-d4ec-4f2f-b01d-9fadb5674213',
    region: 'us-east-1',
  });
  signer = signer.connect(provider);

  console.log('signer address', await signer.getAddress());

  const tx = await signer.sendTransaction({
    from: '0xff5c0ab5aa2bd380cba1d1c7d82747bca210bae8',
    data: bytecode,
    // type: 0,
  });
  console.log('tx', tx);
  console.log('await tx.wait', await tx.wait());
}

main().catch(console.error);
