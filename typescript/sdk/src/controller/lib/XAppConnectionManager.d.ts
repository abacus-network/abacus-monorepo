/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  EventFilter,
  Overrides,
  PopulatedTransaction,
  Signer,
  ethers,
} from 'ethers';

import { TypedEvent, TypedEventFilter, TypedListener } from './commons';

interface XAppConnectionManagerInterface extends ethers.utils.Interface {
  functions: {
    'domainToInbox(uint32)': FunctionFragment;
    'enrollInbox(uint32,address)': FunctionFragment;
    'inboxToDomain(address)': FunctionFragment;
    'interchainGasPaymaster()': FunctionFragment;
    'isInbox(address)': FunctionFragment;
    'localDomain()': FunctionFragment;
    'outbox()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setInterchainGasPaymaster(address)': FunctionFragment;
    'setOutbox(address)': FunctionFragment;
    'setOutboxAndInterchainGasPaymaster(address,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unenrollInbox(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'domainToInbox',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollInbox',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'inboxToDomain',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainGasPaymaster',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'isInbox', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'outbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainGasPaymaster',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'setOutbox', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setOutboxAndInterchainGasPaymaster',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollInbox',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'domainToInbox',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollInbox',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inboxToDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainGasPaymaster',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isInbox', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'outbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainGasPaymaster',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setOutbox', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setOutboxAndInterchainGasPaymaster',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollInbox',
    data: BytesLike,
  ): Result;

  events: {
    'InboxEnrolled(uint32,address)': EventFragment;
    'InboxUnenrolled(uint32,address)': EventFragment;
    'NewInterchainGasPaymaster(address)': EventFragment;
    'NewOutbox(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'InboxEnrolled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InboxUnenrolled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewInterchainGasPaymaster'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOutbox'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class XAppConnectionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XAppConnectionManagerInterface;

  functions: {
    domainToInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    enrollInbox(
      _domain: BigNumberish,
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    inboxToDomain(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<[string]>;

    isInbox(_inbox: string, overrides?: CallOverrides): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    outbox(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setInterchainGasPaymaster(
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOutboxAndInterchainGasPaymaster(
      _outbox: string,
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unenrollInbox(
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  domainToInbox(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  enrollInbox(
    _domain: BigNumberish,
    _inbox: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  inboxToDomain(arg0: string, overrides?: CallOverrides): Promise<number>;

  interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;

  isInbox(_inbox: string, overrides?: CallOverrides): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  outbox(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setInterchainGasPaymaster(
    _interchainGasPaymaster: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOutbox(
    _outbox: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOutboxAndInterchainGasPaymaster(
    _outbox: string,
    _interchainGasPaymaster: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unenrollInbox(
    _inbox: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    domainToInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    enrollInbox(
      _domain: BigNumberish,
      _inbox: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    inboxToDomain(arg0: string, overrides?: CallOverrides): Promise<number>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;

    isInbox(_inbox: string, overrides?: CallOverrides): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    outbox(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInterchainGasPaymaster(
      _interchainGasPaymaster: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOutbox(_outbox: string, overrides?: CallOverrides): Promise<void>;

    setOutboxAndInterchainGasPaymaster(
      _outbox: string,
      _interchainGasPaymaster: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unenrollInbox(_inbox: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    InboxEnrolled(
      domain?: BigNumberish | null,
      inbox?: null,
    ): TypedEventFilter<[number, string], { domain: number; inbox: string }>;

    InboxUnenrolled(
      domain?: BigNumberish | null,
      inbox?: null,
    ): TypedEventFilter<[number, string], { domain: number; inbox: string }>;

    NewInterchainGasPaymaster(
      interchainGasPaymaster?: string | null,
    ): TypedEventFilter<[string], { interchainGasPaymaster: string }>;

    NewOutbox(
      outbox?: string | null,
    ): TypedEventFilter<[string], { outbox: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    domainToInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    enrollInbox(
      _domain: BigNumberish,
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    inboxToDomain(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    isInbox(_inbox: string, overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    outbox(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setInterchainGasPaymaster(
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOutboxAndInterchainGasPaymaster(
      _outbox: string,
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unenrollInbox(
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domainToInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    enrollInbox(
      _domain: BigNumberish,
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    inboxToDomain(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    interchainGasPaymaster(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isInbox(
      _inbox: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setInterchainGasPaymaster(
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOutbox(
      _outbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOutboxAndInterchainGasPaymaster(
      _outbox: string,
      _interchainGasPaymaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unenrollInbox(
      _inbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
