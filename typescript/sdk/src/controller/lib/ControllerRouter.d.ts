/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  EventFilter,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  ethers,
} from 'ethers';

import { TypedEvent, TypedEventFilter, TypedListener } from './commons';

interface ControllerRouterInterface extends ethers.utils.Interface {
  functions: {
    'VERSION()': FunctionFragment;
    'abacusConnectionManager()': FunctionFragment;
    'call(tuple[])': FunctionFragment;
    'callRemote(uint32,tuple[])': FunctionFragment;
    'controller()': FunctionFragment;
    'enrollRemoteRouter(uint32,bytes32)': FunctionFragment;
    'enrollRemoteRouterRemote(uint32,uint32,bytes32)': FunctionFragment;
    'exitRecovery()': FunctionFragment;
    'handle(uint32,bytes32,bytes)': FunctionFragment;
    'inRecovery()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'initiateRecoveryTimelock()': FunctionFragment;
    'owner()': FunctionFragment;
    'recoveryActiveAt()': FunctionFragment;
    'recoveryManager()': FunctionFragment;
    'recoveryTimelock()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'routers(uint32)': FunctionFragment;
    'setAbacusConnectionManager(address)': FunctionFragment;
    'setAbacusConnectionManagerRemote(uint32,address)': FunctionFragment;
    'setController(address)': FunctionFragment;
    'setControllerRemote(uint32,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'abacusConnectionManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'call',
    values: [{ to: BytesLike; data: BytesLike }[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'callRemote',
    values: [BigNumberish, { to: BytesLike; data: BytesLike }[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'controller',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouter',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouterRemote',
    values: [BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'exitRecovery',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'handle',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'inRecovery',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'initiateRecoveryTimelock',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoveryActiveAt',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'recoveryManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'recoveryTimelock',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'routers',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAbacusConnectionManager',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAbacusConnectionManagerRemote',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setController',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setControllerRemote',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'abacusConnectionManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'call', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callRemote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouterRemote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exitRecovery',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'handle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inRecovery', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initiateRecoveryTimelock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'recoveryActiveAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'recoveryManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'recoveryTimelock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'routers', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setAbacusConnectionManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAbacusConnectionManagerRemote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setController',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setControllerRemote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  events: {
    'EnrollRemoteRouter(uint32,bytes32)': EventFragment;
    'ExitRecovery(address)': EventFragment;
    'InitiateRecovery(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetAbacusConnectionManager(address)': EventFragment;
    'SetController(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EnrollRemoteRouter'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExitRecovery'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiateRecovery'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetAbacusConnectionManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetController'): EventFragment;
}

export class ControllerRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControllerRouterInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[number]>;

    abacusConnectionManager(overrides?: CallOverrides): Promise<[string]>;

    call(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callRemote(
      _destination: BigNumberish,
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enrollRemoteRouterRemote(
      _destination: BigNumberish,
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    exitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    inRecovery(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initiateRecoveryTimelock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoveryActiveAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoveryManager(overrides?: CallOverrides): Promise<[string]>;

    recoveryTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setAbacusConnectionManager(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setAbacusConnectionManagerRemote(
      _destination: BigNumberish,
      _abacusConnectionManager: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setControllerRemote(
      _destination: BigNumberish,
      _controller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      _recoveryManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<number>;

  abacusConnectionManager(overrides?: CallOverrides): Promise<string>;

  call(
    _calls: { to: BytesLike; data: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callRemote(
    _destination: BigNumberish,
    _calls: { to: BytesLike; data: BytesLike }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  enrollRemoteRouter(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enrollRemoteRouterRemote(
    _destination: BigNumberish,
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  exitRecovery(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  inRecovery(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _abacusConnectionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initiateRecoveryTimelock(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoveryActiveAt(overrides?: CallOverrides): Promise<BigNumber>;

  recoveryManager(overrides?: CallOverrides): Promise<string>;

  recoveryTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setAbacusConnectionManager(
    _abacusConnectionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setAbacusConnectionManagerRemote(
    _destination: BigNumberish,
    _abacusConnectionManager: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setControllerRemote(
    _destination: BigNumberish,
    _controller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    _recoveryManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<number>;

    abacusConnectionManager(overrides?: CallOverrides): Promise<string>;

    call(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    callRemote(
      _destination: BigNumberish,
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    enrollRemoteRouterRemote(
      _destination: BigNumberish,
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    exitRecovery(overrides?: CallOverrides): Promise<void>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    inRecovery(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _abacusConnectionManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    initiateRecoveryTimelock(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoveryActiveAt(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryManager(overrides?: CallOverrides): Promise<string>;

    recoveryTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setAbacusConnectionManager(
      _abacusConnectionManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAbacusConnectionManagerRemote(
      _destination: BigNumberish,
      _abacusConnectionManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setControllerRemote(
      _destination: BigNumberish,
      _controller: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      _recoveryManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    EnrollRemoteRouter(
      domain?: BigNumberish | null,
      router?: BytesLike | null,
    ): TypedEventFilter<[number, string], { domain: number; router: string }>;

    ExitRecovery(owner?: null): TypedEventFilter<[string], { owner: string }>;

    InitiateRecovery(
      owner?: string | null,
      recoveryActiveAt?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; recoveryActiveAt: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    SetAbacusConnectionManager(
      abacusConnectionManager?: string | null,
    ): TypedEventFilter<[string], { abacusConnectionManager: string }>;

    SetController(
      controller?: string | null,
    ): TypedEventFilter<[string], { controller: string }>;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    abacusConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;

    call(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    callRemote(
      _destination: BigNumberish,
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enrollRemoteRouterRemote(
      _destination: BigNumberish,
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    exitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    inRecovery(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initiateRecoveryTimelock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryActiveAt(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryManager(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAbacusConnectionManager(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setAbacusConnectionManagerRemote(
      _destination: BigNumberish,
      _abacusConnectionManager: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setControllerRemote(
      _destination: BigNumberish,
      _controller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      _recoveryManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abacusConnectionManager(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    call(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    callRemote(
      _destination: BigNumberish,
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enrollRemoteRouterRemote(
      _destination: BigNumberish,
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    exitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    inRecovery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initiateRecoveryTimelock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoveryActiveAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoveryManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoveryTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    routers(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setAbacusConnectionManager(
      _abacusConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setAbacusConnectionManagerRemote(
      _destination: BigNumberish,
      _abacusConnectionManager: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setControllerRemote(
      _destination: BigNumberish,
      _controller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _recoveryManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
