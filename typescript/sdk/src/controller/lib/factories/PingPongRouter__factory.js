'use strict';
/* Autogenerated file. Do not edit manually. */
Object.defineProperty(exports, '__esModule', { value: true });
exports.PingPongRouter__factory = void 0;
const ethers_1 = require('ethers');
const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_abacusConnectionManager',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint32',
        name: 'domain',
        type: 'uint32',
      },
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'router',
        type: 'bytes32',
      },
    ],
    name: 'EnrollRemoteRouter',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint32',
        name: 'domain',
        type: 'uint32',
      },
      {
        indexed: true,
        internalType: 'uint32',
        name: 'matchId',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'count',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'isPing',
        type: 'bool',
      },
    ],
    name: 'Received',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint32',
        name: 'domain',
        type: 'uint32',
      },
      {
        indexed: true,
        internalType: 'uint32',
        name: 'matchId',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'count',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'isPing',
        type: 'bool',
      },
    ],
    name: 'Sent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'abacusConnectionManager',
        type: 'address',
      },
    ],
    name: 'SetAbacusConnectionManager',
    type: 'event',
  },
  {
    inputs: [],
    name: 'abacusConnectionManager',
    outputs: [
      {
        internalType: 'contract IAbacusConnectionManager',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_domain',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '_router',
        type: 'bytes32',
      },
    ],
    name: 'enrollRemoteRouter',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_origin',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '_sender',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'handle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_destinationDomain',
        type: 'uint32',
      },
    ],
    name: 'initiatePingPongMatch',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'routers',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_abacusConnectionManager',
        type: 'address',
      },
    ],
    name: 'setAbacusConnectionManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];
const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161008f38038061008f8339818101604052602081101561003357600080fd5b505160405162461bcd60e51b815260040180806020018281038252602281526020018061006d6022913960400191505060405180910390fdfe6578616d706c65206170706c69636174696f6e2c20646f206e6f74206465706c6f79';
class PingPongRouter__factory extends ethers_1.ContractFactory {
  constructor(signer) {
    super(_abi, _bytecode, signer);
  }
  deploy(_abacusConnectionManager, overrides) {
    return super.deploy(_abacusConnectionManager, overrides || {});
  }
  getDeployTransaction(_abacusConnectionManager, overrides) {
    return super.getDeployTransaction(
      _abacusConnectionManager,
      overrides || {},
    );
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new ethers_1.utils.Interface(_abi);
  }
  static connect(address, signerOrProvider) {
    return new ethers_1.Contract(address, _abi, signerOrProvider);
  }
}
exports.PingPongRouter__factory = PingPongRouter__factory;
PingPongRouter__factory.bytecode = _bytecode;
PingPongRouter__factory.abi = _abi;
//# sourceMappingURL=PingPongRouter__factory.js.map
