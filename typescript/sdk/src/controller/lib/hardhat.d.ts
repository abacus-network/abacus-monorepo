/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from '.';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';
import { ethers } from 'ethers';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AbacusConnectionClient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbacusConnectionClient__factory>;
    getContractFactory(
      name: 'Router',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: 'Common',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Common__factory>;
    getContractFactory(
      name: 'Inbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Inbox__factory>;
    getContractFactory(
      name: 'MerkleTreeManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MerkleTreeManager__factory>;
    getContractFactory(
      name: 'Outbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Outbox__factory>;
    getContractFactory(
      name: 'UpgradeBeaconProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UpgradeBeaconProxy__factory>;
    getContractFactory(
      name: 'Version0',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Version0__factory>;
    getContractFactory(
      name: 'IAbacusConnectionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAbacusConnectionManager__factory>;
    getContractFactory(
      name: 'ICommon',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICommon__factory>;
    getContractFactory(
      name: 'IInterchainGasPaymaster',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IInterchainGasPaymaster__factory>;
    getContractFactory(
      name: 'IMessageRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'TypedMemView',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TypedMemView__factory>;
    getContractFactory(
      name: 'ControllerRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ControllerRouter__factory>;
    getContractFactory(
      name: 'TestSet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestSet__factory>;
    getContractFactory(
      name: 'PingPongRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PingPongRouter__factory>;
    getContractFactory(
      name: 'RouterTemplate',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RouterTemplate__factory>;
    getContractFactory(
      name: 'IBridgeToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBridgeToken__factory>;
    getContractFactory(
      name: 'IWeth',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IWeth__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
  }
}
